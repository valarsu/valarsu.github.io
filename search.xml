<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[HTTP笔记]]></title>
      <url>http://yoursite.com/2017/02/20/about-http/</url>
      <content type="html"><![CDATA[<blockquote>
<p>HTTP对我来说一直是弱项，所以最近看了很多相关资料，记录笔记如下，意在深入理解HTTP。</p>
</blockquote>
<h1 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h1><blockquote>
<p>HTTP协议是互联网上应用最为广泛的一种网络协议，也是浏览器和服务器通信时所采用的协议。在展示网页时，浏览器向服务器发起一个HTTP请求，以获取相应的网站数据，然后在客户端展示相应的内容。</p>
<p>与HTTP协议紧密相关的还有HTTPS协议，它通过SSL和HTTP协议构建可进行加密传输、身份认证的网络协议，能防止数据在传输过程中被挟持或篡改，可以看作是HTTP协议的安全版。</p>
<p>HTTP是Web开发中必须掌握的技术，除了协议本身外，缓存机制、表单的method方法，跨域、网络安全等，都是在页面开发过程中涉及的网络相关的技术点。</p>
</blockquote>
<a id="more"></a>
<h1 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h1><blockquote>
<p>TCP/IP协议族是网络通信需要的各种协议的统称。如从电缆的规格到IP地址的选当方法、寻找异地用户的方法、双方建立通信的顺序、Web页面显示需要处理的步骤等等。</p>
</blockquote>
<h2 id="分层管理"><a href="#分层管理" class="headerlink" title="分层管理"></a>分层管理</h2><ol>
<li>应用层：决定向用户提供应用服务时通信的活动。比如FTP（文件传输协议）和DNS（域名系统）服务就是其中的两类应用。</li>
<li>传输层：对应用层提供处于网络连接中的两台计算机之间的数据传输。传输层中有两个性质不同的协议，TCP（传输控制协议）和UDP（用户数据报协议）</li>
<li>网络层（网络互联层）：处理在网络上流动的数据包（网络传输的最小数据单位）。规定了通过怎样的传输路线到达对方计算机，并把数据包传送给对方。</li>
<li>数据链路层（网络接口层）：用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（网卡）、光纤等物理可见部分。</li>
</ol>
<h2 id="TCP-IP通信传输流"><a href="#TCP-IP通信传输流" class="headerlink" title="TCP/IP通信传输流"></a>TCP/IP通信传输流</h2><blockquote>
<p>应用层（HTTP协议）发送一个请求 <code>-&gt;</code> 传输层（TCP协议）把收到的数据（HTTP请求报文）进行分割，并在各报文上打标记序号及端口号 <code>-&gt;</code> 网络层（IP协议）增加作为通信目的地的MAC地址 <code>-&gt;</code> 链路层（网络） <code>-&gt;</code> 接收端以相反的方向进行。</p>
</blockquote>
<h2 id="IP、TCP和DNS"><a href="#IP、TCP和DNS" class="headerlink" title="IP、TCP和DNS"></a>IP、TCP和DNS</h2><ul>
<li>IP：网络协议（不要把IP和IP地址搞混），位于网络层，作用是要把正确的数据包传送给对方，所以要满足各种条件，最重要的是IP地址（节点被分配到的地址）和MAC地址（网卡所属的固定地址）。网络传输时，要经过多台设备进行中转，中转过程中会用ARP协议根据IP地址解析出中专目标的MAC地址。</li>
<li>TCP：位于传输层，提供可靠的字节流服务。为了传送大数据而把数据分割成以报文段为单位的数据包进行传输，并且能确定数据最终是否能到达。<ul>
<li>三次握手：为了确保能把数据送到目的地，TCP使用flag：<code>SYN</code>和<code>ACK</code>进行三次握手。发送端先发送一个带SYN的数据包给对方，对方接收到后，会回发一个带有SYN/ACK的数据包表示接收到了，然后发送端再发送一个带ACK的数据包，代表握手结束。</li>
</ul>
</li>
<li>DNS：和HTTP一样在应用层，负责域名解析。因为计算机识别IP地址比识别域名要容易，所以用DNS来将域名解析成IP地址，以供服务器识别。也可以通过IP反查域名。</li>
</ul>
<h2 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h2><ul>
<li>URI：统一资源标识符，用字符串标识某个协议方案（HTTP、FTP、file等）标识的互联网资源</li>
<li>URL：统一资源定位符，表示资源的地点（所以URL是URI的子集）</li>
</ul>
<h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><h2 id="每个状态码的含义"><a href="#每个状态码的含义" class="headerlink" title="每个状态码的含义"></a>每个状态码的含义</h2><ul>
<li>1xx（临时响应）：表示临时响应并需要请求者继续执行操作</li>
<li>2xx（成功）：表示成功处理了请求</li>
<li>3xx（重定向）：表示要完成请求需要进一步操作，通常这些状态码用来重定向</li>
<li>4xx（错误）：表示请求可能出错，妨碍了服务器的处理</li>
<li>5xx（服务器错误）：表示服务器在尝试处理请求时发生内部错误。</li>
</ul>
<h2 id="常用状态码："><a href="#常用状态码：" class="headerlink" title="常用状态码："></a>常用状态码：</h2><ul>
<li>200（成功）：服务器已经成功处理了请求。通常这表示服务器提供了请求的页面</li>
<li>304（未修改）：自从上次请求欧，请求的网页未修改过。服务器返回此响应时，不会返回网页内容</li>
<li>401（未授权）：请求要求身份验证。队医需要登录的网页，服务器可能返回此响应</li>
<li>403（禁止）：服务器拒绝请求</li>
<li>404（未找到）：服务器找不到请求的网页</li>
</ul>
<h1 id="经典问题"><a href="#经典问题" class="headerlink" title="经典问题"></a>经典问题</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>HTTP协议是无状态的，为了保持用户会话状态使用了什么技术方案弥补？该技术方赞在用户禁用了cookie之后，还有什么方式实现（可不考虑安全性）？</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>我们常用的保存会话状态的方式有cookie、session、URL GET参数：</p>
<ol>
<li>cookie是保存在浏览器终端内存或者磁盘上的一小块数据，只能保存字符串类型，所有的cookie信息都会随着浏览器的请求而发送。cookie分为：会话cookie：数据保存在内存中，浏览器关闭后将被清除；持久cookie：数据保存在磁盘中。尽管几乎所有浏览器都支持cookie，但是浏览器对单域下cookie的个数和每个key的长度都有限制。</li>
<li>session是一种服务器端的机制，服务器使用一种类似于散列表的结构来保存信息，客户端需要接收、记忆和回送session的会话标识号，session通常是借助客户端存储的cookie来记录会话标识。</li>
<li>GET参数是URL中的普通参数，GET方式是明文传输，其传送的数据量一般会有限制，美中浏览器支持的最大长度会略有不同。</li>
</ol>
<p>要实现保持用户状态，服务端在客户端第一次访问时会自动创建一个session来存储客户端的信息，同时生成一个唯一的key发送给客户端。</p>
<ol>
<li>客户端没有禁用cookie：服务器会在客户端cookie中写入一个key的值，用户保存用户信息，之后的每一次访问都会携带cookie给服务端，服务器可以根据这个值判断用户的唯一性</li>
<li>客户端禁用了cookie：需要将验证信息写入URL中，所有的请求也需要携带这个参数，比如说<code>www.tfdd.com?session_id=xxxxx</code>，相对于cookie来说要麻烦一点，因为页面上所有的链接和请求都必须携带该参数，否则客户端会丢失会话状态</li>
</ol>
<h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>URL输入浏览器到页面呈现，这中间发生了什么？</p>
<h2 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h2><ol>
<li>URL输入到浏览器，负责域名解析的DNS服务会通过域名查找对应的IP地址（也就是获得URL对应的IP地址）；</li>
<li>利用TCP/IP协议族进行网络通信，发送数据包，建立网络连接。客户端会向服务端发送请求，服务端会响应客户端的请求。其中，客户端想浏览器发送请求，发送会经历应用层（HTTP报文）-&gt;传输层（增加TCP头部）-&gt;网络层（IP数据包，增加IP头部）-&gt;数据链路层（增加以太网头部）；服务端则相反。</li>
<li>客户端渲染，渲染引擎对html进行转换，转化成能够被DOM处理的形式，接着转换成一个DOM树，在解析HTML的过程，会发送请求把对应的内容货渠道，同时进行css的解析，构建出css样式规则应用到DOM树上，然后进行一定的布局处理，最后根据这棵渲染树在浏览器窗口进行绘制。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我理解的闭包]]></title>
      <url>http://yoursite.com/2017/02/16/closure/</url>
      <content type="html"><![CDATA[<blockquote>
<p>此篇笔记根据《你不知道的JavaScript》中闭包的部分整理而成。</p>
</blockquote>
<h1 id="启示"><a href="#启示" class="headerlink" title="启示"></a>启示</h1><p>闭包在Js中无处不在，你只需要能够识别并拥抱它。人们缺少的是根据自己的意愿来识别、拥抱和影响闭包的思维环境。</p>
<a id="more"></a>
<h1 id="实质问题"><a href="#实质问题" class="headerlink" title="实质问题"></a>实质问题</h1><blockquote>
<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数实在当前词法作用域之外执行。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(a);</div><div class="line">  &#125;</div><div class="line">  bar();</div><div class="line">&#125;</div><div class="line">foo();<span class="comment">//2</span></div></pre></td></tr></table></figure>
<p>从纯学术的角度说，上面的代码中，bar()具有一个涵盖foo()能访问的所有作用域的<code>闭包</code>，也可以认为bar()被封闭在了foo()的作用域中，因为bar()嵌套在foo()内部。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(a);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo()();<span class="comment">//2</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> baz = foo ();</div><div class="line">baz();<span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<p>正常情况下，函数执行之后，该函数的整个内部作用域都被销毁，因为引擎由垃圾回收机制来释放不再使用的内存空间。而<code>闭包</code>就是在阻止内存释放，因为bar()还在使用foo()的内部作用域，所以这个作用域能够一直存活，以供bar()在之后任何时间进行引用。<code>bar()依然有对该作用域的&#39;引用&#39;，而这个引用就是</code><strong>闭包</strong>。</p>
<blockquote>
<p>bar()在定义时的词法作用域以外的地方被baz()调用，所以闭包使得函数可以继续访问定义时的词法作用域。</p>
<p>无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到闭包。</p>
</blockquote>
<p>我的理解：<code>闭包就是能够让隐式的作用域被当前词法作用域之外访问到的一种引用。通过词法作用域的规则，返回引用作用域的函数，这样其他地方就可以随时访问这个作用域的内容。而为了保证可以随时引用，闭包会阻止引擎的垃圾回收机制，阻止其释放内存。</code></p>
<h1 id="闭包应用场景"><a href="#闭包应用场景" class="headerlink" title="闭包应用场景"></a>闭包应用场景</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span> (<span class="params">message</span>) </span>&#123;</div><div class="line">  setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	<span class="built_in">console</span>.log(message);</div><div class="line">  &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">wait(<span class="string">'Hello fucking closure!'</span>);</div></pre></td></tr></table></figure>
<p>这里<code>timer</code>具有涵盖<code>wait()</code>作用域的闭包，因此还保有对变量<code>message</code>的引用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupBot</span>(<span class="params">name, selector</span>) </span>&#123;</div><div class="line">  $( selector ).click( <span class="function"><span class="keyword">function</span> <span class="title">activator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">"Activating: "</span> + name );</div><div class="line">  &#125; );</div><div class="line">&#125;</div><div class="line">setupBot( <span class="string">"Closure Bot 1"</span>, <span class="string">"#bot_1"</span> );</div><div class="line">setupBot( <span class="string">"Closure Bot 2"</span>, <span class="string">"#bot_2"</span> );</div></pre></td></tr></table></figure>
<p>本质上无论何时何地，如果<code>将函数当作第一级的值类型并到处传递</code>，就会看到闭包的应用。在定时器，事件监听器，Ajax等任何任务中，只要使用了<code>回调函数</code>，实际上就是在使用闭包。</p>
<h1 id="循环和闭包"><a href="#循环和闭包" class="headerlink" title="循环和闭包"></a>循环和闭包</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</div><div class="line">  setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log( i );</div><div class="line">  &#125;, i*<span class="number">1000</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>期望依次输出1，2，3，4，5，间隔一秒。然而实际输出的却是5个6，因为<code>延迟函数的回调会在循环结束时才执行</code>，循环结束时，i已变成6，但是这个时候才开始进入循环主体，所以i一直是6。</p>
<p>那如果setTimeout外面包一层立即执行函数（IIFE），让每次循环都立即进入setTimeout呢？也不行，因为虽然每个延迟函数都会将IIFE在每次循环中创建的作用域中封闭起来，但是<code>如果作用域是空的，那么仅仅封闭是不够的，必须要有实质内容才能用</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> j = i;</div><div class="line">      setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log( j );</div><div class="line">      &#125;, j*<span class="number">1000</span> );</div><div class="line">  &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>改进一下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</div><div class="line">      setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log( j );</div><div class="line">      &#125;, j*<span class="number">1000</span> );</div><div class="line">  &#125;)(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样在迭代内使用IIFE会为每个迭代都产生一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。</p>
<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoolModule</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> something = <span class="string">'cool'</span>;</div><div class="line">  <span class="keyword">var</span> another = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="built_in">console</span>.log(something);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doAnother</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="built_in">console</span>.log(another.join(<span class="string">'!'</span>));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">doSomething</span>: doSomething,</div><div class="line">      <span class="attr">doAnother</span>: doAnother</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = CoolModule();</div><div class="line">foo.doSomething();<span class="comment">//cool</span></div><div class="line">foo.doAnother();<span class="comment">//1!2!3</span></div></pre></td></tr></table></figure>
<p>这个模式在Js中被称作模块，这个对象类型的返回值最终被赋值给外部的变量foo，然后就可以通过它来访问模块的公共属性方法。<br>doSomething()和doAnother()函数具有涵盖模块实例内部作用域的闭包。这样就可以访问coolModule()作用域内的属性方法。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当函数可以<code>记住并访问所在的词法作用域</code>时，就产生了闭包，即使函数实在<code>当前词法作用域之外</code>执行。</p>
<p><strong>闭包的两个主要特征：</strong></p>
<ul>
<li>为创建内部作用域而调用了一个包装函数</li>
<li>包装函数的返回值必须至少包括一个对内部函数的引用，这样会创建涵盖整个包装函数内部作用域的闭包。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2017/02/16/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
